<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html style="--pulse-color: #fffc0230;"><head>
<meta http-equiv="content-type" content="text/html; charset=windows-1252"><title>Interfacing with the key board</title><meta name="GENERATOR" content="Modular DocBook HTML Stylesheet Version 1.7"><link rel="HOME" title=" NCURSES Programming HOWTO " href="https://tldp.org/HOWTO/NCURSES-Programming-HOWTO/index.html"><link rel="PREVIOUS" title="Colors" href="https://tldp.org/HOWTO/NCURSES-Programming-HOWTO/color.html"><link rel="NEXT" title="Interfacing with the mouse " href="https://tldp.org/HOWTO/NCURSES-Programming-HOWTO/mouse.html"><style>:root {
  --pulse-color: #fffc002e;
}

._pericles_inspector {
  border: 1px solid #000;
  background-color: rgba(102, 136, 253, 0.2) !important;
  color: #000 !important;
  /* opacity: 0.6; */
}

/* ._pericles_app { */
/* position: absolute; */
/* top: 0; */
/* left: 0; */
/* width: 100%; */
/* } */

ps-sen {
  cursor: pointer;
}

._pericles_pulse,
._pericles_pulse,
ps-sen:hover {
  /*margin:100px; */
  /*display: block; */
  /*width: 22px; */
  /*height: 22px; */
  /*border-radius: 10%; */
  background: var(--pulse-color);
  /* opacity: 0.9; */
  cursor: pointer;
  /* box-shadow: 0 0 0 rgba(204, 169, 44, 0.2); */
  box-shadow: 0 0 0 rgba(255, 0, 32, 0.6);
  -webkit-animation: pulse 2s infinite;
  -moz-animation: pulse 2s infinite;
  -ms-animation: pulse 2s infinite;
  -o-animation: pulse 2s infinite;
  animation: pulse 2s infinite;
}

/*.pulse:hover { */
/*animation: none; */
/*} */

@-webkit-keyframes pulse {
  0% {
    -webkit-box-shadow: 0 0 0 0 rgba(204, 169, 44, 0.4);
  }

  70% {
    -webkit-box-shadow: 0 0 0 1px rgba(204, 169, 44, 0);
  }

  100% {
    -webkit-box-shadow: 0 0 0 0 rgba(204, 169, 44, 0);
  }
}

@keyframes pulse {
  0% {
    -moz-box-shadow: 0 0 0 0 rgba(204, 169, 44, 0.4);
    box-shadow: 0 0 0 0 rgba(204, 169, 44, 0.4);
  }

  70% {
    -moz-box-shadow: 0 0 0 1px rgba(204, 169, 44, 0);
    box-shadow: 0 0 0 1px rgba(204, 169, 44, 0);
  }

  100% {
    -moz-box-shadow: 0 0 0 0 rgba(204, 169, 44, 0);
    box-shadow: 0 0 0 0 rgba(204, 169, 44, 0);
  }
}
</style></head><body class="SECT1" bgcolor="#FFFFFF" text="#000000" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="NAVHEADER"><table summary="Header navigation table" width="100%" border="0" cellpadding="0" cellspacing="0"><tbody><tr><th colspan="3" align="center">NCURSES Programming HOWTO</th></tr><tr><td width="10%" align="left" valign="bottom"><a href="https://tldp.org/HOWTO/NCURSES-Programming-HOWTO/color.html" accesskey="P">Prev</a></td><td width="80%" align="center" valign="bottom"></td><td width="10%" align="right" valign="bottom"><a href="https://tldp.org/HOWTO/NCURSES-Programming-HOWTO/mouse.html" accesskey="N">Next</a></td></tr></tbody></table><hr align="LEFT" width="100%"></div><div class="SECT1"><h1 class="SECT1"><a name="KEYS"></a>11. Interfacing with the key board</h1><div class="SECT2"><h2 class="SECT2"><a name="KEYSBASICS"></a>11.1. The Basics</h2><p>No GUI is complete without a strong user interface and to interact with the
user, a curses program should be sensitive to key presses or the mouse actions
done by the user. Let's deal with the keys first.</p><p>As you have seen in almost all of the above examples, it's very easy to get key
input from the user. A simple way of getting key presses is to use
<tt class="LITERAL">getch()</tt> function. The cbreak mode should be
enabled to read keys when you are interested in reading individual key hits
rather than complete lines of text (which usually end with a carriage return).
keypad should be enabled to get the Functions keys, arrow keys etc.  See the
initialization section for details.</p><p><tt class="LITERAL">getch()</tt> returns an integer corresponding to the
key pressed. If it is a normal character, the integer value will be equivalent
to the character. Otherwise it returns a number which can be matched with the
constants defined in <tt class="LITERAL">curses.h</tt>.  For example if
the user presses F1, the integer returned is 265. This can be checked using the
macro KEY_F() defined in curses.h. This makes reading keys portable and easy to
manage.</p><p>For example, if you call getch() like this</p><table border="0" bgcolor="#E0E0E0" width="100%"><tbody><tr><td><font color="#000000"><pre class="PROGRAMLISTING">    int ch;

    ch = getch();</pre></font></td></tr></tbody></table><p>getch() will wait for the user to press a key, (unless you specified a timeout)
and when user presses a key, the corresponding integer is returned. Then you can
check the value returned with the constants defined in curses.h to match against
the keys you want.</p><p>The following code piece will do that job.</p><table border="0" bgcolor="#E0E0E0" width="100%"><tbody><tr><td><font color="#000000"><pre class="PROGRAMLISTING">    if(ch == KEY_LEFT)
        printw("Left arrow is pressed\n");</pre></font></td></tr></tbody></table><p>Let's write a small program which creates a menu which can be navigated by up
and down arrows.</p></div><div class="SECT2"><h2 class="SECT2"><a name="SIMPLEKEYEX"></a>11.2. A Simple Key Usage example</h2><div class="EXAMPLE"><a name="BSIKE"></a><p><b>Example 10.  A Simple Key Usage example </b></p><table border="0" bgcolor="#E0E0E0" width="100%"><tbody><tr><td><font color="#000000"><pre class="PROGRAMLISTING"><span class="INLINEMEDIAOBJECT">#include &lt;stdio.h&gt;
#include &lt;ncurses.h&gt;

#define WIDTH 30
#define HEIGHT 10 

int startx = 0;
int starty = 0;

char *choices[] = { 
			"Choice 1",
			"Choice 2",
			"Choice 3",
			"Choice 4",
			"Exit",
		  };
int n_choices = sizeof(choices) / sizeof(char *);
void print_menu(WINDOW *menu_win, int highlight);

int main()
{	WINDOW *menu_win;
	int highlight = 1;
	int choice = 0;
	int c;

	initscr();
	clear();
	noecho();
	cbreak();	/* Line buffering disabled. pass on everything */
	startx = (80 - WIDTH) / 2;
	starty = (24 - HEIGHT) / 2;
		
	menu_win = newwin(HEIGHT, WIDTH, starty, startx);
	keypad(menu_win, TRUE);
	mvprintw(0, 0, "Use arrow keys to go up and down, Press enter to select a choice");
	refresh();
	print_menu(menu_win, highlight);
	while(1)
	{	c = wgetch(menu_win);
		switch(c)
		{	case KEY_UP:
				if(highlight == 1)
					highlight = n_choices;
				else
					--highlight;
				break;
			case KEY_DOWN:
				if(highlight == n_choices)
					highlight = 1;
				else 
					++highlight;
				break;
			case 10:
				choice = highlight;
				break;
			default:
				mvprintw(24, 0, "Charcter pressed is = %3d Hopefully it can be printed as '%c'", c, c);
				refresh();
				break;
		}
		print_menu(menu_win, highlight);
		if(choice != 0)	/* User did a choice come out of the infinite loop */
			break;
	}	
	mvprintw(23, 0, "You chose choice %d with choice string %s\n", choice, choices[choice - 1]);
	clrtoeol();
	refresh();
	endwin();
	return 0;
}


void print_menu(WINDOW *menu_win, int highlight)
{
	int x, y, i;	

	x = 2;
	y = 2;
	box(menu_win, 0, 0);
	for(i = 0; i &lt; n_choices; ++i)
	{	if(highlight == i + 1) /* High light the present choice */
		{	wattron(menu_win, A_REVERSE); 
			mvwprintw(menu_win, y, x, "%s", choices[i]);
			wattroff(menu_win, A_REVERSE);
		}
		else
			mvwprintw(menu_win, y, x, "%s", choices[i]);
		++y;
	}
	wrefresh(menu_win);
}
</span></pre></font></td></tr></tbody></table></div></div></div><div class="NAVFOOTER"><hr align="LEFT" width="100%"><table summary="Footer navigation table" width="100%" border="0" cellpadding="0" cellspacing="0"><tbody><tr><td width="33%" align="left" valign="top"><a href="https://tldp.org/HOWTO/NCURSES-Programming-HOWTO/color.html" accesskey="P">Prev</a></td><td width="34%" align="center" valign="top"><a href="https://tldp.org/HOWTO/NCURSES-Programming-HOWTO/index.html" accesskey="H">Home</a></td><td width="33%" align="right" valign="top"><a href="https://tldp.org/HOWTO/NCURSES-Programming-HOWTO/mouse.html" accesskey="N">Next</a></td></tr><tr><td width="33%" align="left" valign="top">Colors</td><td width="34%" align="center" valign="top">&nbsp;</td><td width="33%" align="right" valign="top">Interfacing with the mouse</td></tr></tbody></table></div></body></html>